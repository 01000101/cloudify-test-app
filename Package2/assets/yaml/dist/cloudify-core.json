{
  "node_types": {
    "cloudify.nodes.Root": {
      "interfaces": {
        "cloudify.interfaces.lifecycle": {
          "create": {},
          "configure": {},
          "start": {},
          "stop": {},
          "delete": {}
        },
        "cloudify.interfaces.validation": {
          "creation": {},
          "deletion": {}
        },
        "cloudify.interfaces.monitoring": {
          "start": {},
          "stop": {}
        }
      }
    },
    "cloudify.nodes.Tier": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.Compute": {
      "derived_from": "cloudify.nodes.Root",
      "properties": {
        "install_agent": {
          "default": true
        },
        "cloudify_agent": {
          "default": {}
        },
        "ip": {
          "default": ""
        }
      },
      "interfaces": {
        "cloudify.interfaces.worker_installer": {
          "install": "agent_installer.worker_installer.tasks.install",
          "start": "agent_installer.worker_installer.tasks.start",
          "stop": "agent_installer.worker_installer.tasks.stop",
          "uninstall": "agent_installer.worker_installer.tasks.uninstall",
          "restart": "agent_installer.worker_installer.tasks.restart"
        },
        "cloudify.interfaces.plugin_installer": {
          "install": "plugin_installer.plugin_installer.tasks.install"
        },
        "cloudify.interfaces.host": {
          "get_state": {}
        },
        "cloudify.interfaces.monitoring_agent": {
          "install": {},
          "start": {},
          "stop": {},
          "uninstall": {}
        }
      }
    },
    "cloudify.nodes.Container": {
      "derived_from": "cloudify.nodes.Compute"
    },
    "cloudify.nodes.Volume": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.FileSystem": {
      "derived_from": "cloudify.nodes.Root",
      "properties": {
        "use_external_resource": {
          "description": "Enables the use of already formatted volumes.\n",
          "type": "boolean",
          "default": false
        },
        "partition_type": {
          "description": "The partition type. 83 is a Linux Native Partition.\n",
          "type": "integer",
          "default": 83
        },
        "fs_type": {
          "description": "The type of the File System. Supported types are [ext2, ext3, ext4, fat, ntfs, swap]\n",
          "type": "string"
        },
        "fs_mount_path": {
          "description": "The path of the mount point.\n",
          "type": "string"
        }
      },
      "interfaces": {
        "cloudify.interfaces.lifecycle": {
          "configure": {
            "implementation": "script.script_runner.tasks.run",
            "inputs": {
              "script_path": {
                "default": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/mkfs.sh"
              }
            }
          }
        }
      }
    },
    "cloudify.nodes.ObjectStorage": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.Network": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.Subnet": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.Port": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.Router": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.LoadBalancer": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.VirtualIP": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.SecurityGroup": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.SoftwareComponent": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.DBMS": {
      "derived_from": "cloudify.nodes.SoftwareComponent"
    },
    "cloudify.nodes.Database": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.WebServer": {
      "derived_from": "cloudify.nodes.SoftwareComponent",
      "properties": {
        "port": {
          "default": 80
        }
      }
    },
    "cloudify.nodes.ApplicationServer": {
      "derived_from": "cloudify.nodes.SoftwareComponent"
    },
    "cloudify.nodes.MessageBusServer": {
      "derived_from": "cloudify.nodes.SoftwareComponent"
    },
    "cloudify.nodes.ApplicationModule": {
      "derived_from": "cloudify.nodes.Root"
    },
    "cloudify.nodes.CloudifyManager": {
      "derived_from": "cloudify.nodes.SoftwareComponent",
      "properties": {
        "cloudify": {
          "description": "Configuration for Cloudify Manager\n",
          "default": {
            "resources_prefix": "",
            "cloudify_agent": {
              "min_workers": 2,
              "max_workers": 5,
              "remote_execution_port": 22,
              "user": "ubuntu"
            },
            "workflows": {
              "task_retries": -1,
              "task_retry_interval": 30
            },
            "policy_engine": {
              "start_timeout": 30
            }
          }
        },
        "cloudify_packages": {
          "description": "Links to Cloudify packages to be installed on the manager\n"
        }
      }
    }
  },
  "relationships": {
    "cloudify.relationships.depends_on": {
      "source_interfaces": {
        "cloudify.interfaces.relationship_lifecycle": {
          "preconfigure": {},
          "postconfigure": {},
          "establish": {},
          "unlink": {}
        }
      },
      "target_interfaces": {
        "cloudify.interfaces.relationship_lifecycle": {
          "preconfigure": {},
          "postconfigure": {},
          "establish": {},
          "unlink": {}
        }
      },
      "properties": {
        "connection_type": {
          "default": "all_to_all"
        }
      }
    },
    "cloudify.relationships.connected_to": {
      "derived_from": "cloudify.relationships.depends_on"
    },
    "cloudify.relationships.contained_in": {
      "derived_from": "cloudify.relationships.depends_on"
    },
    "cloudify.relationships.file_system_depends_on_volume": {
      "derived_from": "cloudify.relationships.depends_on",
      "source_interfaces": {
        "cloudify.interfaces.relationship_lifecycle": {
          "preconfigure": {
            "implementation": "script.script_runner.tasks.run",
            "inputs": {
              "script_path": {
                "default": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/fdisk.sh"
              },
              "device_name": {
                "default": {
                  "get_attribute": [
                    "TARGET",
                    "device_name"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "cloudify.relationships.file_system_contained_in_compute": {
      "derived_from": "cloudify.relationships.contained_in",
      "source_interfaces": {
        "cloudify.interfaces.relationship_lifecycle": {
          "establish": {
            "implementation": "script.script_runner.tasks.run",
            "inputs": {
              "script_path": {
                "default": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/mount.sh"
              }
            }
          },
          "unlink": {
            "implementation": "script.script_runner.tasks.run",
            "inputs": {
              "script_path": {
                "default": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/unmount.sh"
              }
            }
          }
        }
      }
    }
  },
  "workflows": {
    "install": "default_workflows.cloudify.plugins.workflows.install",
    "uninstall": "default_workflows.cloudify.plugins.workflows.uninstall",
    "execute_operation": {
      "mapping": "default_workflows.cloudify.plugins.workflows.execute_operation",
      "parameters": {
        "operation": {},
        "operation_kwargs": {
          "default": {}
        },
        "allow_kwargs_override": {
          "default": null
        },
        "run_by_dependency_order": {
          "default": false
        },
        "type_names": {
          "default": []
        },
        "node_ids": {
          "default": []
        },
        "node_instance_ids": {
          "default": []
        }
      }
    },
    "heal": {
      "mapping": "default_workflows.cloudify.plugins.workflows.auto_heal_reinstall_node_subgraph",
      "parameters": {
        "node_instance_id": {
          "description": "Which node instance has failed"
        },
        "diagnose_value": {
          "description": "Diagnosed reason of failure",
          "default": "Not provided"
        }
      }
    },
    "scale": {
      "mapping": "default_workflows.cloudify.plugins.workflows.scale",
      "parameters": {
        "node_id": {
          "description": "Which node (not node instance) to scale"
        },
        "delta": {
          "description": "How many nodes should be added/removed. A positive number denotes increase of instances. A negative number denotes decrease of instances.\n",
          "default": 1
        },
        "scale_compute": {
          "description": "If node is contained (transitively) within a compute node and this property is 'true', operate on compute node instead of 'node_id'\n",
          "default": true
        }
      }
    }
  },
  "plugins": {
    "agent_installer": {
      "executor": "central_deployment_agent",
      "install": false
    },
    "plugin_installer": {
      "executor": "host_agent",
      "install": false
    },
    "windows_agent_installer": {
      "executor": "central_deployment_agent",
      "install": false
    },
    "windows_plugin_installer": {
      "executor": "host_agent",
      "install": false
    },
    "default_workflows": {
      "executor": "central_deployment_agent",
      "install": false
    },
    "script": {
      "executor": "host_agent",
      "install": false
    }
  },
  "policy_types": {
    "cloudify.policies.types.host_failure": {
      "properties": {
        "policy_operates_on_group": {
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n",
          "default": false
        },
        "is_node_started_before_workflow": {
          "description": "Before triggering workflow, check if the node state is started",
          "default": true
        },
        "interval_between_workflows": {
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n",
          "default": 300
        },
        "service": {
          "description": "Service names whose events should be taken into consideration",
          "default": [
            "service"
          ]
        }
      },
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/policies/host_failure.clj"
    },
    "cloudify.policies.types.threshold": {
      "properties": {
        "policy_operates_on_group": {
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n",
          "default": false
        },
        "is_node_started_before_workflow": {
          "description": "Before triggering workflow, check if the node state is started",
          "default": true
        },
        "interval_between_workflows": {
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n",
          "default": 300
        },
        "service": {
          "description": "The service name",
          "default": "service"
        },
        "threshold": {
          "description": "The metric threshold value"
        },
        "upper_bound": {
          "description": "boolean value for describing the semantics of the threshold.\nif 'true': metrics whose value is bigger than the threshold will cause the triggers to be processed.\nif 'false': metrics with values lower than the threshold will do so.\n",
          "default": true
        },
        "stability_time": {
          "description": "How long a threshold must be breached before the triggers will be processed",
          "default": 0
        }
      },
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/policies/threshold.clj"
    },
    "cloudify.policies.types.ewma_stabilized": {
      "properties": {
        "policy_operates_on_group": {
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n",
          "default": false
        },
        "is_node_started_before_workflow": {
          "description": "Before triggering workflow, check if the node state is started",
          "default": true
        },
        "interval_between_workflows": {
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n",
          "default": 300
        },
        "service": {
          "description": "The service name",
          "default": "service"
        },
        "threshold": {
          "description": "The metric threshold value"
        },
        "upper_bound": {
          "description": "boolean value for describing the semantics of the threshold.\nif 'true': metrics whose value is bigger than the threshold will cause the triggers to be processed.\nif 'false': metrics with values lower than the threshold will do so.\n",
          "default": true
        },
        "stability_time": {
          "description": "How long a threshold must be breached before the triggers will be processed",
          "default": 0
        },
        "ewma_timeless_r": {
          "description": "r is the ratio between successive events. The smaller it is, the smaller impact on the computed value the most recent event has.\n",
          "default": 0.5
        }
      },
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/policies/ewma_stabilized.clj"
    }
  },
  "policy_triggers": {
    "cloudify.policies.triggers.execute_workflow": {
      "parameters": {
        "workflow": {
          "description": "Workflow name to execute"
        },
        "workflow_parameters": {
          "description": "Workflow paramters",
          "default": {}
        },
        "force": {
          "description": "Should the workflow be executed even when another execution\nfor the same workflow is currently in progress\n",
          "default": false
        },
        "allow_custom_parameters": {
          "description": "Should parameters not defined in the workflow parameters\nschema be accepted\n",
          "default": false
        },
        "socket_timeout": {
          "description": "Socket timeout when making request to manager REST in ms",
          "default": 1000
        },
        "conn_timeout": {
          "description": "Connection timeout when making request to manager REST in ms",
          "default": 1000
        }
      },
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/triggers/execute_workflow.clj"
    }
  }
}